MIFOS SETUP IN MY LOCAL MACHINE


Gap analysus
1. Adding new lables to the presentaiton - for e.g branch hierarchy
2. Ability to assign org/role
3. Adding staffs
4. AAdding roles


Roles and permissions

SET GLOBAL sql_mode = '';

https://localhost:8443/fineract-provider/api/v1?tenantIdentifier=default


org.apache.fineract.portfolio.loanaccount.loanschedule.domain.AbstractLoanScheduleGenerator.updateAmortization(MathContext, LoanApplicationTerms, int, Money)


/fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/loanschedule/domain/LoanScheduleGenerator.java
/fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/loanschedule/domain/LoanScheduleGeneratorFactory.java
/fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/loanschedule/domain/DecliningBalanceInterestLoanScheduleGenerator.java
/fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/loanschedule/domain/FlatInterestLoanScheduleGenerator.java

https://192.168.1.108:8443/fineract-provider/api/v1/loans?


Loan submision
https://192.168.1.108:8443/fineract-provider/api/v1/loans/19?associations=all&exclude=guarantors,futureSchedule

The code that generates the schedule
1.LoansApiResource.calculateLoanScheduleOrSubmitLoanApplication(String, UriInfo, String)
	-calculationPlatformService.calculateLoanSchedule
		-LoanScheduleCalculationPlatformService.calculateLoanSchedule
			-LoanScheduleCalculationPlatformServiceImpl.calculateLoanSchedule
				-loanScheduleAssembler.assembleLoanScheduleFrom
					-loanScheduleAssembler.assembleLoanScheduleFrom
						-LoanScheduleGenerator loanScheduleGenerator = this.loanScheduleFactory.create(loanApplicationTerms.getInterestMethod());
						-


Createloan product
https://192.168.1.108:8443/fineract-provider/api/v1/loanproducts/template
org.apache.fineract.portfolio.loanproduct.api.LoanProductsApiResource.createLoanProduct(String)

org.apache.fineract.portfolio.loanproduct.domain.InterestMethod
org.apache.fineract.portfolio.loanproduct.service.LoanDropdownReadPlatformServiceImpl.retrieveLoanInterestTypeOptions()

loadsampledata.sql contains sql entty to create loan products

Ok the next step is to pick the right compatible version of  mifos components
1. Server
2. WebUi
3. Android Client

Currently when checked the fineract war file that I downloaded from mifosx site or where it tells the last meaningful 
release is 16.12.01.RELEASE. Sounds idiotic as it is based on the date

How did I bring Structure payment support in UI
1. EnumOptionData - added toString method
2. LoanProductsApiResource.java - added a sysout to indicate that this is a changed sourcecode
3. AmortizationMethod.java -  Added additional getter method - isWhiteSpace
	Previous version
		EQUAL_PRINCIPAL(0, "amortizationType.equal.principal"), //
		EQUAL_INSTALLMENTS(1, "amortizationType.equal.installments"), //
	    	INVALID(2, "amortizationType.invalid");
    	Current version
	    	WHITEPACE_INSTALLMENTS(0, "amortizationType.equal.whitepsace"),
	    	EQUAL_PRINCIPAL(1, "amortizationType.equal.principal"), 
	    	EQUAL_INSTALLMENTS(2, "amortizationType.equal.installments");




4. InterestMethod.java - Added additional type and removed invalid
5. LoanApplicationTerms
	-There were lot of places where the amortization method and interest method were accessed
	-Changed all of them to reflect the whitespace method
6. DefaultLoanScheduleGeneratorFactory.java
	-Removed invalid method and added whitespace methods
7. LoanEnumerations.java
	-Removed invalide method and added whitespace methods for both amortization and interesttypes
	-Line 267 and 288
	-This is the place where the UI label is set
8. build.grade-Added additional exclusion types for rat
	-.recommenders/**',	
	'.metadata/**',
9. gradle.properties
	-changed releaseVersion	

How am I trying to bring up the table in the loanproduct ui
1. I have made changes  CreateLoanProductController.js 
	- added a new function addLoanSchedule

2. Added a new table in createloanproduct.html
	-Added support to generate multiiple entrires	


There is something about angular js, that is really attractive to me. I sense that the mvc has found its way in the rightt finally in the web world.
Atleast it gives me an oppurtunity to work on UI code, with wout wracking my brain. What I really find interesting and helpful is the part where
the UI code lives entirely separate from the server and the data exchange happens between them completelty through json. That kind of gives me
a sense that I can confidently work with the belief that it is true mvc.

ResourceFactory.js -  the place where all the controllers are defined.
loanProductResource - The controller that I am currently interested.
	- supported methods
		getAllLoanProducts
		save

Well I have a hit roadblock when I was trying to perform a save with the changes that I made to the client code
1. The submit button itself did not work, when I had the schedule table created
2. The submit failed, stating that the scheduleMatrix field is 
	The parameter `scheduleMatrix` has been passed and is not supported for this request.

So I am looking around currently, find out who exactly is passing this error back.
1. its 400, so its indeed server generated
2. There are bunch of classes that I am going through
	org.apache.fineract.portfolio.loanproduct.api.LoanProductsApiResource.createLoanProduct(String)
		This seems like the starting point and it calls commandsSourceWritePlatformService, which manifests as
			PortfolioCommandSourceWritePlatformServiceImpl	
	LoanProductConstants - contains all the parameters required for the loan configuration
	LoanProductConfigurableAttributes - This potentially seems to be place for the change, however i am not really sure at this point
	LoanProduct - Also seems to be a candidate

However with all this still put in, I am still not sure from where the 400 error is being thrown.
Ok When I went back and started searching, I could use the error message ' has been passed and is not supported for this request.' 
and trace it back to the locale json which has all the labels
	-locale-en.json - line 347 - error.msg.parameter.unsupported
Then I took that error message and searched for a clue, then I got back the class that was using this error message and it turned out to be
UnsupportedParameterExceptionMapper. And this is getting called in a class called ErrorHandler, which is what is writing the 400 error
back. Plus it is being called from some batchservice, that kind of leaves me cold in the trail. Nevertheless, I am going to do dumpStack
and figure from where the exception is coming from, next.

And I got into another mess
As I was changing the scheduleMatrix variable in CreateLoanProductController.js from formData to scope.
I forgot to consistently make the changes in createloanproduct.html which made me go through a lot of
pain, as I was struggling to find out what was happening. Everything worked(the onclick event, called the function, but there
was no result, because I have changed the variable. Quite a simple mistake, but a costly price !!!)

Wow, this was a crazy session of coding - March 8 2017
1. I had first faced the issue not being able to create the schedule . The reason was, I did not properly mention the variiable in createloadproduct.html page where the table was getting created.
2. Once, I fixed, then I realized that the scheduleMatrix was not properly attached the form data that was submitted
3. Then I realized that it was form submit rather than a javascript induced form submit - I am still not sure about this though, because what I receive inside the app is a json graph? So how come ?
4. And finally in the server side, there was a loanvalidation module - LoanProductDataValidator called by LoanProductWritePlatformServiceJpaRepositoryImpl.createLoanProduct(JsonCommand) for validating the incoming 
json graph,
5. I added the scheduleMatrix variable and finally made the error go away.
6. Now I need to complete the loop


CREATE TABLE `m_product_loan_schedule` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `installment_no` varchar(100) NOT NULL,
  `installment_amount` decimal(19,6) DEFAULT NULL,
  `installment_principal` decimal(19,6) DEFAULT NULL,
  `installment_interest` decimal(19,6) DEFAULT NULL,  
  `loan_product_id` bigint(20) NOT NULL,  
  PRIMARY KEY (`id`),
  KEY `LOAN_PRODUCT_ID` (`loan_product_id`),  
  CONSTRAINT `FK_LOAN_PDT` FOREIGN KEY (`loan_product_id`) REFERENCES `m_product_loan` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;




I am trying to watch the sequence of creating loans
LoanScheduleAssembler.assembleLoanScheduleFrom(LoanApplicationTerms, boolean, List<Holiday>, WorkingDays, JsonElement, List<LoanDisbursementDetails>) line: 612	
As I was going through this process, I got tripped off by another exception that  said something the loanschedule increment is wrong.
And it took some time for me to realize that some odd debugging session would have left the tables in inconsistent state. So I truncated all m_loan% tables and reran transaction to success!!

I checked if the fix was ok, but running through the process twice


LoanScheduleModel and LoanScheduleModelPeriod - are the data models
LoanScheduleModelPeriod is an interface and it as two implementations,
1. For disbursal - 
2. Another for repayment  - 

org.apache.fineract.portfolio.loanaccount.loanschedule.service.LoanScheduleAssembler.assembleLoanApplicationTermsFrom(JsonElement, LoanProduct)

This seems to be the place of action for creating the schedule

Keeping the system waiting too long on the debugger is actually creating havoc


Most of schedule generation code is with the abstractscheduler itself. all we need to do is to give the principal and interest for the current period number

In Loan application terms, I have changed it to use loanproduct reference

There a lot of pending items that need to be addessed
1. I have not paid respect to localization standards
2. I have still not added support fo schedule lifecycle for edit, view
3. I hava one nullpointer issue that i need to addess
4. I have added apache license for our code, which I need to remove
5.  I have not added any validation so far
6.  i have to have a reset button set along with the create schedule

Check-in summary in all the changes meant for the structured payment option - first label
1. ErrorHandler - printStackTrace added in line 72
2. CommandSource - Added a sysout in line 100
3. PortfolioCommandSourceWritePlatformServiceImpl.java - Added sysout line 93
4. SynchronousCommandProcessingService.java
	- 3 sysout
	-  first one at line 88 -   System.out.println("2909 - SyncCommand.process&log- id="+command.commandId()+", url="+command.getUrl()+", product-id="+command.getProductId());
	- second one at line 90 - System.out.println("2909 - SyncCommand- command is update");
	- third one at line 94 - System.out.println("2909 - SyncCommand- command is insert");
5. Loan
	- Added support for sending in the loan product reference to loan application terms initialization
		- constructLoanApplicationTerms
		- getLoanApplicationTerms 
6. DefaultLoanScheduleGeneratorFactory.
	- Changed the name from Whitespaceloanschedulegenerator to DhuruvaScheduleGenerator
	- Added an additional sys			
7.DhuruvaScheduleGenerator.java
	-Added new schedule generator
8. LoanApplicationTerms.java
	-Added reference to loanproduct
	-cascading changes into all methods that require creation
9.LoanScheduleAssembler.java
	-LoanApplicationTerms - loanProduct reference change
10. LoanApplicationWritePlatformServiceJpaRepositoryImpl.java
	Added in
        	catch(final PersistenceException dve) {
        	System.out.println("2909-SOME-ERROR");
        	dve.printStackTrace();
11.LoanProductConstants.java
	Added new constants
	 "scheduleMatrix";
	  "installNum";
	  "installAmt";
	  "installPrincipal";
	  "installInterest";        	
12.LoanProductsApiResource.java
	Added System.out.println("2909- Loan product creation starts here="+apiRequestBodyAsJson);
13. LoanProduct.java & LoanProductScheduleLineItem.java
	Added support for loanproduct schedule item
14.  LoanProductScheduleLineItem.java
	Added the datamodel support to store the manually created schedule
15. LoanProductDataValidator.java
	Added scheduleMatrix column to be considered a valid column



GOOGLE CLOUD SETUP
0. Create a new user in google by the name - lasalle.su with password dhuruva#2909
1. I have taken up a 4 processor 16 gb machine - in asia region
2. Set up the gcloud for interaction by following instructions in
https://cloud.google.com/sdk/docs/quickstart-linux
3.gcloud init
4. gcloud auth list
5. gcloud auth login
6. gcloud documentation
	https://cloud.google.com/sdk/docs/
7. Interactive shel
	https://cloud.google.com/sdk/docs/interactive-gcloud

8. Logging into the machine
	gcloud compute --project "certain-gearbox-161011" ssh --zone "asia-east1-c" "dev-box-1"	
9. Byobu documentation
	http://byobu.co/documentation.html	


CREATING A NEW SUBNET FOR THE DBMC
	1. Install docker
		https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04

	2. sudo docker network create --subnet=172.18.0.0/16 dbmc-net	
	3. Installing mysql docker
		REFER - 
			1. my sql docker file in git hub for 5.7- https://github.com/docker-library/mysql/blob/eeb0c33dfcad3db46a0dfb24c352d2a1601c7667/5.7/Dockerfile
			2. Docker reference - https://hub.docker.com/_/mysql/
		DO - 
			3.1 I have cloned the mysql official 5.7.17 docker file into my github account. And followed it with updating the docker file with nettools update. And built the docker with 
				"git clone git@github.com:jpvelsamy/mysql.git"
				"sudo docker build -t dbmc/mysql:5.7.17 ."
			3.2 Setting up data folder for mysql  - do this as root user 
				sudo su
				mkdir -p /root/docker-data/mysql
				
			3.3 sudo docker run -it -h dbmc-mysql-node --ip 172.18.0.5 --add-host dbmc-appserver-node:172.18.0.2 --add-host dbmc-webserver-node:172.18.0.6 --net dbmc-net -v /root/docker-data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=password -d dbmc/mysql:5.7.17

			3.3 Access the container using
				sudo docker exec -it --user root [container id] /bin/bash
			3.4 mysql -u root -ppassword
				CREATE DATABASE `mifosplatform-tenants`
				CREATE DATABASE `mifostenant-default`
			3.5 Add following machine names in /etc/host
				172.18.0.5 dbmc-mysql-node
				172.18.0.2 dbmc-appserver-node
				172.18.0.6 dbmc-webserver-node
			3.6  change the mysql password to root in build.grade
			3.7 change all localhost:3306 in build.grade using
				REF - http://vim.wikia.com/wiki/Search_and_replace
				%s/localhost:3306/dbmc-mysql-node:3306/gc
			3.8  Download and install java in landing machine
			curl -LO 'http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz' -H 'Cookie: oraclelicense=accept-securebackup-cookie' 
			sudo update-alternatives --install /usr/bin/java java /home/jpvel/jdk1.8.0_121/bin/java 1
			export JAVA_HOME=/home/jpvel/jdk1.8.0_121
			3.9 install the server database using the landing machine from workspace/incubator/fineract-provider
				./gradlew migrateTenantListDB -PdbName=mifosplatform-tenants
			3.10 Install the defaul tenant database
				1.  Go to mysql server - its running a docker instance so use either the byobu screen or do docker exec
				2.  Log into the database and use the server database
				UPDATE tenant_server_connections SET schema_server='dbmc-mysql-node', schema_password='password' WHERE schema_name='mifostenant-default';
				3. SET GLOBAL sql_mode = '';
				4.  ./gradlew migrateTenantDB -PdbName=mifostenant-default
		4. Installing tomcat
			1. Clone jpvelsamy/tomcat into Landingmachine
			2. Use tomcat 7/jre8 version - that means   you need to go to appropriate folder . do not use alpine for now
			sudo docker build -t dbmc/tomcat:7.0.75 .
			3. sudo docker run -it -h  dbmc-appserver-node --ip 172.18.0.2 --add-host dbmc-mysql-node:172.18.0.5 --add-host dbmc-webserver-node:172.18.0.6 --net dbmc-net -p 8080:8080 -p 8443:8443 -d dbmc/tomcat:7.0.75
			4. sudo docker exec -it --user root [container id] /bin/bash
			5. Create the keystore
				https://mifosforge.jira.com/wiki/display/docs/Mifos+X+Installation+on+Linux+-+Ubuntu+Server

				keytool -genkey -keyalg RSA -alias tomcat -keystore /usr/local/tomcat/tomcat.keystore
			6. wget http://central.maven.org/maven2/org/drizzle/jdbc/drizzle-jdbc/1.3/drizzle-jdbc-1.3.jar
		5. Building the app in landing machine
			cd workspace/incubator-fineract/fineract-provider
			./gradlew war
		6. Copy the war file
			sudo docker cp ./build/lib/fineract-provider.war <>:/usr/local/tomcat/webapps
		7. Clone the ui source code in the workspace folder
			git  clone git@github.com:jpvelsamy/community-app.git
		8. For now I am using grunt as the webserver and its not cool.
			docker pull node:7.7.1
			sudo docker run -it -h  dbmc-webserver-node --ip 172.18.0.6  --add-host dbmc-mysql-node:172.18.0.5 --add-host dbmc-appserver-node:172.18.0.2 --net dbmc-net -p 0.0.0.0:80:9000 -d node:7.7.1
			sudo docker exec -it --user root [container id] /bin/bash

			In Landing machine
			tar -cvzf community-app.tar.gz ./community-app/
			sudo docker cp ./community-app.tar.gz vibrant_hoover:/home/node/downloads
			
			In webserver
				npm config set prefix ~
			 	npm install -g bower
			 	npm install -g grunt-cli
   			  	~/bin/bower install
   			  	npm install
   			  Install vim in webserver through root
   			  update initialTasks.js with 
   			  var baseApiUrl = "https://104.199.238.10:8443/fineract-provider/api/v1?tenantIdentifier=default";
   			  remember that needs to be an external ip
   			  change Gruntfile.js to point to 0.0.0.0 instead of localhost
   			  ~/bin/grunt serve

   		
NOTE -
In case if you want to cleanup the docker instances
	sudo docker ps -a -q>/tmp/containers.txt
	while read name; do sudo docker rm ${name}; done</tmp/containers.txt

auto install with apt-get
http://askubuntu.com/questions/448358/automating-apt-get-install-with-assume-yes
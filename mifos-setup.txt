MIFOS SETUP IN MY LOCAL MACHINE

https://mifosforge.jira.com/wiki/spaces/docs/pages/74711072/Mifos+X+Installation+on+Linux+Ubuntu+Server
Gap analysus
1. Adding new lables to the presentaiton - for e.g branch hierarchy
2. Ability to assign org/role
3. Adding staffs
4. AAdding roles


Roles and permissions

SET GLOBAL sql_mode = '';

https://localhost:8443/fineract-provider/api/v1?tenantIdentifier=default


org.apache.fineract.portfolio.loanaccount.loanschedule.domain.AbstractLoanScheduleGenerator.updateAmortization(MathContext, LoanApplicationTerms, int, Money)


/fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/loanschedule/domain/LoanScheduleGenerator.java
/fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/loanschedule/domain/LoanScheduleGeneratorFactory.java
/fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/loanschedule/domain/DecliningBalanceInterestLoanScheduleGenerator.java
/fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/loanschedule/domain/FlatInterestLoanScheduleGenerator.java

https://192.168.1.108:8443/fineract-provider/api/v1/loans?


Loan submision
https://192.168.1.108:8443/fineract-provider/api/v1/loans/19?associations=all&exclude=guarantors,futureSchedule

The code that generates the schedule
1.LoansApiResource.calculateLoanScheduleOrSubmitLoanApplication(String, UriInfo, String)
	-calculationPlatformService.calculateLoanSchedule
		-LoanScheduleCalculationPlatformService.calculateLoanSchedule
			-LoanScheduleCalculationPlatformServiceImpl.calculateLoanSchedule
				-loanScheduleAssembler.assembleLoanScheduleFrom
					-loanScheduleAssembler.assembleLoanScheduleFrom
						-LoanScheduleGenerator loanScheduleGenerator = this.loanScheduleFactory.create(loanApplicationTerms.getInterestMethod());
						-


Createloan product
https://192.168.1.108:8443/fineract-provider/api/v1/loanproducts/template
org.apache.fineract.portfolio.loanproduct.api.LoanProductsApiResource.createLoanProduct(String)

org.apache.fineract.portfolio.loanproduct.domain.InterestMethod
org.apache.fineract.portfolio.loanproduct.service.LoanDropdownReadPlatformServiceImpl.retrieveLoanInterestTypeOptions()

loadsampledata.sql contains sql entty to create loan products

Ok the next step is to pick the right compatible version of  mifos components
1. Server
2. WebUi
3. Android Client

Currently when checked the fineract war file that I downloaded from mifosx site or where it tells the last meaningful 
release is 16.12.01.RELEASE. Sounds idiotic as it is based on the date

How did I bring Structure payment support in UI
1. EnumOptionData - added toString method
2. LoanProductsApiResource.java - added a sysout to indicate that this is a changed sourcecode
3. AmortizationMethod.java -  Added additional getter method - isWhiteSpace
	Previous version
		EQUAL_PRINCIPAL(0, "amortizationType.equal.principal"), //
		EQUAL_INSTALLMENTS(1, "amortizationType.equal.installments"), //
	    	INVALID(2, "amortizationType.invalid");
    	Current version
	    	WHITEPACE_INSTALLMENTS(0, "amortizationType.equal.whitepsace"),
	    	EQUAL_PRINCIPAL(1, "amortizationType.equal.principal"), 
	    	EQUAL_INSTALLMENTS(2, "amortizationType.equal.installments");




4. InterestMethod.java - Added additional type and removed invalid
5. LoanApplicationTerms
	-There were lot of places where the amortization method and interest method were accessed
	-Changed all of them to reflect the whitespace method
6. DefaultLoanScheduleGeneratorFactory.java
	-Removed invalid method and added whitespace methods
7. LoanEnumerations.java
	-Removed invalide method and added whitespace methods for both amortization and interesttypes
	-Line 267 and 288
	-This is the place where the UI label is set
8. build.grade-Added additional exclusion types for rat
	-.recommenders/**',	
	'.metadata/**',
9. gradle.properties
	-changed releaseVersion	

How am I trying to bring up the table in the loanproduct ui
1. I have made changes  CreateLoanProductController.js 
	- added a new function addLoanSchedule

2. Added a new table in createloanproduct.html
	-Added support to generate multiiple entrires	


There is something about angular js, that is really attractive to me. I sense that the mvc has found its way in the rightt finally in the web world.
Atleast it gives me an oppurtunity to work on UI code, with wout wracking my brain. What I really find interesting and helpful is the part where
the UI code lives entirely separate from the server and the data exchange happens between them completelty through json. That kind of gives me
a sense that I can confidently work with the belief that it is true mvc.

ResourceFactory.js -  the place where all the controllers are defined.
loanProductResource - The controller that I am currently interested.
	- supported methods
		getAllLoanProducts
		save

Well I have a hit roadblock when I was trying to perform a save with the changes that I made to the client code
1. The submit button itself did not work, when I had the schedule table created
2. The submit failed, stating that the scheduleMatrix field is 
	The parameter `scheduleMatrix` has been passed and is not supported for this request.

So I am looking around currently, find out who exactly is passing this error back.
1. its 400, so its indeed server generated
2. There are bunch of classes that I am going through
	org.apache.fineract.portfolio.loanproduct.api.LoanProductsApiResource.createLoanProduct(String)
		This seems like the starting point and it calls commandsSourceWritePlatformService, which manifests as
			PortfolioCommandSourceWritePlatformServiceImpl	
	LoanProductConstants - contains all the parameters required for the loan configuration
	LoanProductConfigurableAttributes - This potentially seems to be place for the change, however i am not really sure at this point
	LoanProduct - Also seems to be a candidate

However with all this still put in, I am still not sure from where the 400 error is being thrown.
Ok When I went back and started searching, I could use the error message ' has been passed and is not supported for this request.' 
and trace it back to the locale json which has all the labels
	-locale-en.json - line 347 - error.msg.parameter.unsupported
Then I took that error message and searched for a clue, then I got back the class that was using this error message and it turned out to be
UnsupportedParameterExceptionMapper. And this is getting called in a class called ErrorHandler, which is what is writing the 400 error
back. Plus it is being called from some batchservice, that kind of leaves me cold in the trail. Nevertheless, I am going to do dumpStack
and figure from where the exception is coming from, next.

And I got into another mess
As I was changing the scheduleMatrix variable in CreateLoanProductController.js from formData to scope.
I forgot to consistently make the changes in createloanproduct.html which made me go through a lot of
pain, as I was struggling to find out what was happening. Everything worked(the onclick event, called the function, but there
was no result, because I have changed the variable. Quite a simple mistake, but a costly price !!!)

Wow, this was a crazy session of coding - March 8 2017
1. I had first faced the issue not being able to create the schedule . The reason was, I did not properly mention the variiable in createloadproduct.html page where the table was getting created.
2. Once, I fixed, then I realized that the scheduleMatrix was not properly attached the form data that was submitted
3. Then I realized that it was form submit rather than a javascript induced form submit - I am still not sure about this though, because what I receive inside the app is a json graph? So how come ?
4. And finally in the server side, there was a loanvalidation module - LoanProductDataValidator called by LoanProductWritePlatformServiceJpaRepositoryImpl.createLoanProduct(JsonCommand) for validating the incoming 
json graph,
5. I added the scheduleMatrix variable and finally made the error go away.
6. Now I need to complete the loop


CREATE TABLE `m_product_loan_schedule` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `installment_no` varchar(100) NOT NULL,
  `installment_amount` decimal(19,6) DEFAULT NULL,
  `installment_principal` decimal(19,6) DEFAULT NULL,
  `installment_interest` decimal(19,6) DEFAULT NULL,  
  `loan_product_id` bigint(20) NOT NULL,  
  PRIMARY KEY (`id`),
  KEY `LOAN_PRODUCT_ID` (`loan_product_id`),  
  CONSTRAINT `FK_LOAN_PDT` FOREIGN KEY (`loan_product_id`) REFERENCES `m_product_loan` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;




I am trying to watch the sequence of creating loans
LoanScheduleAssembler.assembleLoanScheduleFrom(LoanApplicationTerms, boolean, List<Holiday>, WorkingDays, JsonElement, List<LoanDisbursementDetails>) line: 612	
As I was going through this process, I got tripped off by another exception that  said something the loanschedule increment is wrong.
And it took some time for me to realize that some odd debugging session would have left the tables in inconsistent state. So I truncated all m_loan% tables and reran transaction to success!!

I checked if the fix was ok, but running through the process twice


LoanScheduleModel and LoanScheduleModelPeriod - are the data models
LoanScheduleModelPeriod is an interface and it as two implementations,
1. For disbursal - 
2. Another for repayment  - 

org.apache.fineract.portfolio.loanaccount.loanschedule.service.LoanScheduleAssembler.assembleLoanApplicationTermsFrom(JsonElement, LoanProduct)

This seems to be the place of action for creating the schedule

Keeping the system waiting too long on the debugger is actually creating havoc


Most of schedule generation code is with the abstractscheduler itself. all we need to do is to give the principal and interest for the current period number

In Loan application terms, I have changed it to use loanproduct reference

There a lot of pending items that need to be addessed
1. I have not paid respect to localization standards
2. I have still not added support fo schedule lifecycle for edit, view
3. I hava one nullpointer issue that i need to addess
4. I have added apache license for our code, which I need to remove
5.  I have not added any validation so far
6.  i have to have a reset button set along with the create schedule

Check-in summary in all the changes meant for the structured payment option - first label
1. ErrorHandler - printStackTrace added in line 72
2. CommandSource - Added a sysout in line 100
3. PortfolioCommandSourceWritePlatformServiceImpl.java - Added sysout line 93
4. SynchronousCommandProcessingService.java
	- 3 sysout
	-  first one at line 88 -   System.out.println("2909 - SyncCommand.process&log- id="+command.commandId()+", url="+command.getUrl()+", product-id="+command.getProductId());
	- second one at line 90 - System.out.println("2909 - SyncCommand- command is update");
	- third one at line 94 - System.out.println("2909 - SyncCommand- command is insert");
5. Loan
	- Added support for sending in the loan product reference to loan application terms initialization
		- constructLoanApplicationTerms
		- getLoanApplicationTerms 
6. DefaultLoanScheduleGeneratorFactory.
	- Changed the name from Whitespaceloanschedulegenerator to DhuruvaScheduleGenerator
	- Added an additional sys			
7.DhuruvaScheduleGenerator.java
	-Added new schedule generator
8. LoanApplicationTerms.java
	-Added reference to loanproduct
	-cascading changes into all methods that require creation
9.LoanScheduleAssembler.java
	-LoanApplicationTerms - loanProduct reference change
10. LoanApplicationWritePlatformServiceJpaRepositoryImpl.java
	Added in
        	catch(final PersistenceException dve) {
        	System.out.println("2909-SOME-ERROR");
        	dve.printStackTrace();
11.LoanProductConstants.java
	Added new constants
	 "scheduleMatrix";
	  "installNum";
	  "installAmt";
	  "installPrincipal";
	  "installInterest";        	
12.LoanProductsApiResource.java
	Added System.out.println("2909- Loan product creation starts here="+apiRequestBodyAsJson);
13. LoanProduct.java & LoanProductScheduleLineItem.java
	Added support for loanproduct schedule item
14.  LoanProductScheduleLineItem.java
	Added the datamodel support to store the manually created schedule
15. LoanProductDataValidator.java
	Added scheduleMatrix column to be considered a valid column



GOOGLE CLOUD SETUP
0. Create a new user in google by the name - lasalle.su with password dhuruva#2909
1. I have taken up a 4 processor 16 gb machine - in asia region
2. Set up the gcloud for interaction by following instructions in
https://cloud.google.com/sdk/docs/quickstart-linux
3.gcloud init
4. gcloud auth list
5. gcloud auth login
6. gcloud documentation
	https://cloud.google.com/sdk/docs/
7. Interactive shel
	https://cloud.google.com/sdk/docs/interactive-gcloud

8. Logging into the machine
	gcloud compute --project "certain-gearbox-161011" ssh --zone "asia-east1-c" "dev-box-1"	
9. Byobu documentation
	http://byobu.co/documentation.html	


CREATING A NEW SUBNET FOR THE DBMC
	1. Install docker
		https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04

	2. sudo docker network create --subnet=172.18.0.0/16 dbmc-net	
	3. Installing mysql docker
		REFER - 
			1. my sql docker file in git hub for 5.7- https://github.com/docker-library/mysql/blob/eeb0c33dfcad3db46a0dfb24c352d2a1601c7667/5.7/Dockerfile
			2. Docker reference - https://hub.docker.com/_/mysql/
		DO - 
			3.1 I have cloned the mysql official 5.7.17 docker file into my github account. And followed it with updating the docker file with nettools update. And built the docker with 
				"git clone git@github.com:jpvelsamy/mysql.git"
				"sudo docker build -t dbmc/mysql:5.7.17 ."
			3.2 Setting up data folder for mysql  - do this as root user 
				sudo su
				mkdir -p /root/docker-data/mysql
				
			3.3 sudo docker run -it -h dbmc-mysql-node --ip 172.18.0.5 --add-host dbmc-appserver-node:172.18.0.2 --add-host dbmc-webserver-node:172.18.0.6 --net dbmc-net -v /root/docker-data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=password -d dbmc/mysql:5.7.17

			3.3 Access the container using
				sudo docker exec -it --user root [container id] /bin/bash
			3.4 mysql -u root -ppassword
				CREATE DATABASE `mifosplatform-tenants`
				CREATE DATABASE `mifostenant-default`
			3.5 Add following machine names in /etc/host
				172.18.0.5 dbmc-mysql-node
				172.18.0.2 dbmc-appserver-node
				172.18.0.6 dbmc-webserver-node
			3.6  change the mysql password to root in build.grade
			3.7 change all localhost:3306 in build.grade using
				REF - http://vim.wikia.com/wiki/Search_and_replace
				%s/localhost:3306/dbmc-mysql-node:3306/gc
			3.8  Download and install java in landing machine
			curl -LO 'http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz' -H 'Cookie: oraclelicense=accept-securebackup-cookie' 
			sudo update-alternatives --install /usr/bin/java java /home/jpvel/jdk1.8.0_121/bin/java 1
			export JAVA_HOME=/home/jpvel/jdk1.8.0_121
			3.9 install the server database using the landing machine from workspace/incubator/fineract-provider
				./gradlew migrateTenantListDB -PdbName=mifosplatform-tenants
			3.10 Install the defaul tenant database
				1.  Go to mysql server - its running a docker instance so use either the byobu screen or do docker exec
				2.  Log into the database and use the server database
				UPDATE tenant_server_connections SET schema_server='dbmc-mysql-node', schema_password='password' WHERE schema_name='mifostenant-default';
				3. SET GLOBAL sql_mode = '';
				4.  ./gradlew migrateTenantDB -PdbName=mifostenant-default
		4. Installing tomcat
			1. Clone jpvelsamy/tomcat into Landingmachine
			2. Use tomcat 7/jre8 version - that means   you need to go to appropriate folder . do not use alpine for now
			sudo docker build -t dbmc/tomcat:7.0.75 .
			3. sudo docker run -it -h  dbmc-appserver-node --ip 172.18.0.2 --add-host dbmc-mysql-node:172.18.0.5 --add-host dbmc-webserver-node:172.18.0.6 --net dbmc-net -p 0.0.0.0:8080:8080 -p 0.0.0.0:443:8443 -d dbmc/tomcat:7.0.75
			4. sudo docker exec -it --user root [container id] /bin/bash
			5. Create the keystore
				https://mifosforge.jira.com/wiki/display/docs/Mifos+X+Installation+on+Linux+-+Ubuntu+Server

				keytool -genkey -keyalg RSA -alias tomcat -keystore /usr/local/tomcat/tomcat.keystore
			6. wget http://central.maven.org/maven2/org/drizzle/jdbc/drizzle-jdbc/1.3/drizzle-jdbc-1.3.jar
		5. Building the app in landing machine
			cd workspace/incubator-fineract/fineract-provider
			./gradlew war
		6. Copy the war file
			sudo docker cp ./build/lib/fineract-provider.war <>:/usr/local/tomcat/webapps
		7. Clone the ui source code in the workspace folder
			git  clone git@github.com:jpvelsamy/community-app.git
		8. For now I am using grunt as the webserver and its not cool.
			docker pull node:7.7.1
			sudo docker run -it -h  dbmc-webserver-node --ip 172.18.0.6  --add-host dbmc-mysql-node:172.18.0.5 --add-host dbmc-appserver-node:172.18.0.2 --net dbmc-net -p 0.0.0.0:80:9000 -d node:7.7.1
			sudo docker exec -it --user node [container id] /bin/bash
			mkdir downloads

			In Landing machine
			tar -cvzf community-app.tar.gz ./community-app/
			sudo docker cp ./community-app.tar.gz vibrant_hoover:/home/node/downloads
			
			In webserver
				npm config set prefix ~;npm install -g bower;npm install -g grunt-cli;~/bin/bower install;npm install
   			  Install vim in webserver through root
   			  update initialTasks.js with 
   			  var baseApiUrl = "https://104.199.238.10/fineract-provider/api/v1?tenantIdentifier=default";
   			  remember that needs to be an external ip
   			  change Gruntfile.js to point to 0.0.0.0 instead of localhost
   			  ~/bin/grunt serve

   		
NOTE -
In case if you want to cleanup the docker instances
	sudo docker ps -a -q>/tmp/containers.txt
	while read name; do sudo docker rm ${name}; done</tmp/containers.txt

auto install with apt-get
http://askubuntu.com/questions/448358/automating-apt-get-install-with-assume-yes

dbmc site
http://104.199.238.10/#/


lasalle website
password - 5WhDgVFt
ip - http://107.167.178.174/
https://google.bitnami.com/vms/bitnami-wordpress-dm-f10d


google cloud url for lasalle
https://console.cloud.google.com/home/dashboard?project=certain-gearbox-161011&authuser=0

apache fineract installation page
https://cwiki.apache.org/confluence/display/FINERACT/Fineract+Installation+on+Ubuntu+Server


Mifos jira
https://mifosforge.jira.com/wiki/spaces/MIFOSX/overview


I have initialized  a new google cloud shell machine to access the materials in the cloud
http://www.tecmint.com/add-users-in-linux/
usermod -aG sudo username
 sudo mkhomedir_helper jpvel
 su - jpvel



CREATE TABLE DATASOURCE(NAME VARCHAR(50) NOT NULL PRIMARY KEY,MAXACTCONN INTEGER NOT NULL,DRIVERCLASS VARCHAR(50) NOT NULL,IDLECONN INTEGER NOT NULL,USERNAME VARCHAR(50) NULL,PASSWORD VARCHAR(150) NULL,URL VARCHAR(512) NOT NULL,QUERY VARCHAR(100) NULL,WAIT INTEGER NOT NULL);



INSERT INTO DATASOURCE VALUES('SourceDB',20,'com.mysql.jdbc.Driver',5,'root','cGFzc3dvcmQ=','jdbc:mysql://dbmc-mysql-node:3306/mifostenant-default?useUnicode=true&characterEncoding=UTF-8','select 1',1000);


INSERT INTO DATASOURCE VALUES('DestinationDB',20,'com.mysql.jdbc.Driver',5,'root','cGFzc3dvcmQ=','jdbc:mysql://dbmc-mysql-node:3306/mifos_bi?useUnicode=true&characterEncoding=UTF-8','select 1',1000);

Loan product closing not going after 2020

https://lab.lasalle.in/fineract-provider/api/v1/runreports/Client Listing(Pentaho)?output-type=HTML&tenantIdentifier=default&locale=en&dateFormat=dd MMMM yyyy&R_selectOffice=10

at org.apache.fineract.infrastructure.dataqueries.service.GenericDataServiceImpl.fillGenericResultSet(GenericDataServiceImpl.java:59) ~[c
lasses/:na]
        at org.apache.fineract.infrastructure.dataqueries.service.ReadReportingServiceImpl.retrieveGenericResultset(ReadReportingServiceImpl.java
:175) ~[classes/:na]
        at org.apache.fineract.infrastructure.dataqueries.api.RunreportsApiResource.runReport(RunreportsApiResource.java:121) ~[classes/:na]



Pentaho reporting adventure
Good youtube reference for mifos reports
https://www.youtube.com/watch?v=JgTJCiyOsIQ
Digital ocean
https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04
Kitchen doc
http://wiki.pentaho.com/display/EAI/Kitchen+User+Documentation
Pentaho doc
http://kettle-pentaho.blogspot.in/p/use-jndi-in-pentaho.html
MysqL loggin
http://stackoverflow.com/questions/10903206/enabling-mysql-general-query-log-with-jdbc

The biggest issue that I faced was, that the instruction that was made available in the documentation
was prettty incomplete. Here are the pointers
1. DestinationDb and SourceDb were missing in simple-jndi/jndi.properties
2. Existing configuration was all about hsql
3. shell scripts were missing in 1.3 release, I had to go and check them out of 1.2 release
4. Shell scripts had no help section
5. Data import for mifoswarehouse were all embedded in mifos_bi
6. 




Reporting investigation
References
https://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_week
1. New clients
 select count(*), week(activation_date) as week_, month(activation_date) as month_, status_enum from m_client where status_enum=300 group by month_, week_, status_enum;

2. Attendance table
m_client_attendance


Dump command
mysqldump -h dbmc-mysql-node -u root -ppassword mifostenant-default>mifostenant-default.28-03-2017.dmp
mysqldump -h dbmc-mysql-node -u root -ppassword mifostenant-default>mifostenant-default.03-04-2017.dmp

Copy command - https://cloud.google.com/compute/docs/instances/transfer-files
gcloud compute copy-files dev-box-2:/home/sid/mifostenant-default.03-04-2017.dmp . 



Key references
https://mifosforge.jira.com/wiki/spaces/MIFOS/pages/6258835/SQL+Query+Repository
https://demo.openmf.org/architecture/
https://mifosforge.jira.com/wiki/spaces/MDZ/pages/176324648/Using+the+New+Address+Module


Starting the tomcat in debugger mode
Reference - https://blogs.mulesoft.com/dev/tomcat-tcat-server/debugging-your-tomcat-webapp-with-eclipse/
export JPDA_ADDRESS=8001
export JAVA_HOME=/home/jpvel/jdk1.8.0_121
rm -rf ../logs/*.out;rm -rf ../logs/*.txt;rm -rf ../logs/*.log
./catalina.sh jpda start



       sudo update-alternatives --install /usr/bin/keytool keytool /home/jpvel/jdk1.8.0_121/bin/keytool 1
   97  sudo update-alternatives --install /usr/bin/java java /home/jpvel/jdk1.8.0_121/bin/java 1
  119  sudo update-alternatives --install /usr/bin/java java /home/jpvel/jdk1.8.0_121/bin/java 1
  123  sudo update-alternatives --install /usr/bin/java java /home/jpvel/jdk1.8.0_121/bin/java 1
  241  sudo update-alternatives --install /usr/bin/java java /home/jpvel/jdk1.8.0_121/bin/java 1
  242  sudo update-alternatives --install /usr/bin/javac javac /home/jpvel/jdk1.8.0_121/bin/javac 1
  243  sudo update-alternatives --install /usr/bin/jps jps /home/jpvel/jdk1.8.0_121/bin/jps 1
  244  sudo update-alternatives --install /usr/bin/jconsole jconsole /home/jpvel/jdk1.8.0_121/bin/jconsole 1
  295  sudo update-alternatives --config java
  297  sudo update-alternatives --config jps
  298  sudo update-alternatives --config javac


Installing sublime text
sudo add-apt-repository -y ppa:webupd8team/sublime-text-2

Monthly wise newly formed center

select count(*) as New_Center_Count, month(center.activation_date) as month_id, master.month_name from m_group center inner join month_master master on month(center.activation_date)=master.month_num where center.closedon_date is null group by month(center.activation_date), master.month_name order by month(center.activation_date) asc;

Monthly wise newly formed center with branch name
select count(*) as New_Center_Count, month(center.activation_date) as month_id, master.month_name, office.name from m_group center inner join month_master master on month(center.activation_date)=master.month_num inner join m_office office on center.office_id=office.id where center.closedon_date is null group by month(center.activation_date), master.month_name, center.office_id order by month(center.activation_date) asc;

NOTE - Time difference to id a center to be a renewal center or a drop out center or an delayed renewal center will differ for different products

Current center - Centers that have outstanding balances


Demand vs Collection
Loan schedule against collection sheet
Summary only needed
Day wise breakup
Overdue also needed

Collection pending is an independent



Week day data generated using 
https://www.epochconverter.com/weeks/2017
set default_week_format = 3;


Weekly newly formed centers
------------------------------------------
select count(*) as New_Center_Count, week(center.activation_date) as week_no, month(center.activation_date) as month_no, year(center.activation_date) as year_no from m_group center group by week_no, month_no, year_no;



Weekly newly formed centers with branch name with weekly split up and week numbers
------------------------------------------------------------------------------------
DROP VIEW VIEW_GROUPS_ONLY;
CREATE VIEW VIEW_GROUPS_ONLY AS SELECT COUNT(*) client_count, group_id FROM m_group_client group by group_id;

DROP VIEW VIEW_NEWLY_FORMED_CENTRE;
CREATE VIEW VIEW_NEWLY_FORMED_CENTRE AS SELECT office.id as office_id, IFNULL(center.staff_id,-1) AS staff_id, count(*) as new_center_count, group_concat(center.display_name) as center_list,week(center.activation_date) as week_number, month(center.activation_date) as month_number, year(center.activation_date) as year_number from m_group center inner join m_office office on center.office_id=office.id inner join VIEW_GROUPS_ONLY mgc on mgc.group_id=center.id where center.closedon_date is null group by office.id, center.staff_id, year(center.activation_date), month(center.activation_date), week(center.activation_date);


SELECT ounder.name as "Office", 
	IFNULL(ms.display_name,'-') as "Loan Officer",
	week.week_name as "Quarter of Week", 
	week.start_date as "Week start",
	week.end_Date as "Week end",
	month.month_name as "Month", 
	a.year_number as "Year", 
	a.new_center_count as "New Centers",
	a.center_list as "Center list"  
	FROM m_office mo
  	JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
  	AND ounder.hierarchy like CONCAT('${currentUserHierarchy}', '%')
  	INNER JOIN VIEW_NEWLY_FORMED_CENTRE a ON a.office_id=ounder.id 
  	INNER JOIN week_master week on concat(year_number,'-',month_number,'-',week_number)=week.week_id 
  	INNER JOIN month_master month on month.month_num=a.month_number 
  	INNER JOIN m_staff ms ON ms.id=a.staff_id 
  	WHERE mo.id=${officeId}
 	AND (IFNULL(a.staff_id, -10) = "${loanOfficerId}" OR "-1" = "${loanOfficerId}")
 	AND a.week_number BETWEEN WEEK('${startDate}') AND WEEK('${endDate}')
  	ORDER BY year_number, month_number, week_number ASC;

Newly formed center query example
----------------------------------
SELECT ounder.name as "Office", 
	IFNULL(ms.display_name,'-') as "Loan Officer",
	week.week_name as "Quarter of Week", 
	week.start_date as "Week start",
	week.end_Date as "Week end",
	month.month_name as "Month", 
	a.year_number as "Year", 
	a.new_center_count as "New Centers",
	a.center_list as "Center list"	
	FROM m_office mo
  	JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
  	AND ounder.hierarchy like CONCAT('.', '%')
  	INNER JOIN VIEW_NEWLY_FORMED_CENTRE a ON a.office_id=ounder.id 
  	INNER JOIN week_master week on concat(year_number,'-',month_number,'-',week_number)=week.week_id 
  	INNER JOIN month_master month on month.month_num=a.month_number 
  	INNER JOIN m_staff ms ON ms.id=a.staff_id 
  	WHERE mo.id=39
 	AND (IFNULL(a.staff_id, -10) = "8" OR "-1" = "8")
 	AND a.week_number BETWEEN WEEK('2016-06-01') AND WEEK('2016-11-01')
  	ORDER BY year_number, month_number, week_number ASC;


Weekly newly added clients summary with branch wise split up
------------------------------------------------------------------
DROP VIEW VIEW_NEWLY_ADDED_CLIENT;
CREATE VIEW VIEW_NEWLY_ADDED_CLIENT AS SELECT office.id as office_id, IFNULL(client.staff_id,-1) AS staff_id, count(*) as new_client_count, week(client.activation_date) as week_number, month(client.activation_date) as month_number, year(client.activation_date) as year_number from m_client client inner join m_office office on client.office_id=office.id where client.rejectedon_date is null group by office.id, client.staff_id, year(client.activation_date), month(client.activation_date), week(client.activation_date);

Template query
----------------------------------
SELECT ounder.name as "Office", 
	IFNULL(ms.display_name,'-') as "Loan Officer",
	week.week_name as "Quarter of Week", 
	month.month_name as "Month", 
	a.year_number as "Year", 
	a.new_client_count as "New Clients"  
	FROM m_office mo
  	JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
  	AND ounder.hierarchy like CONCAT('.', '%')
  	INNER JOIN VIEW_NEWLY_ADDED_CLIENT a ON a.office_id=ounder.id 
  	INNER JOIN week_master week on concat(year_number,'-',month_number,'-',week_number)=week.week_id 
  	INNER JOIN month_master month on month.month_num=a.month_number 
  	INNER JOIN m_staff ms ON ms.id=a.staff_id 
  	WHERE mo.id=${officeId}
 	AND (IFNULL(a.staff_id, -10) = "${loanOfficerId}" OR "-1" = "${loanOfficerId}")
 	AND a.week_number BETWEEN WEEK('${startDate}') AND WEEK('${endDate}')
  	ORDER BY year_number, month_number, week_number ASC;

Newly added client query example
----------------------------------
SELECT ounder.name as "Office", 
	IFNULL(ms.display_name,'-') as "Loan Officer",
	week.week_name as "Quarter of Week", 
	month.month_name as "Month", 
	a.year_number as "Year", 
	a.new_client_count as "New Clients"  
	FROM m_office mo
  	JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
  	AND ounder.hierarchy like CONCAT('.', '%')
  	INNER JOIN VIEW_NEWLY_ADDED_CLIENT a ON a.office_id=ounder.id  
  	INNER JOIN week_master week on concat(year_number,'-',month_number,'-',week_number)=week.week_id 
  	INNER JOIN month_master month on month.month_num=a.month_number 
  	INNER JOIN m_staff ms ON ms.id=a.staff_id 
  	WHERE mo.id=39
 	AND (IFNULL(a.staff_id, -10) = "8" OR "-1" = "8")
 	AND a.week_number BETWEEN WEEK('2016-06-01') AND WEEK('2016-11-01')
  	ORDER BY year_number, month_number, week_number ASC;

Demand versus Collection summary Actual query
-----------------------------------------------
SELECT 
      ounder.name 'Office', 
      IFNULL(ms.display_name,'-') 'Loan Officer',
    mc.account_no 'Client Account Number',
    mc.display_name 'Name',
    mp.name 'Product',
    ml.account_no 'Loan Account Number',
    mr.duedate 'Due Date',
    mr.installment 'Installment',
    cu.display_symbol 'Currency',
    mr.principal_amount- IFNULL(mr.principal_completed_derived,0) 'Principal Due',
    mr.interest_amount- IFNULL(IFNULL(mr.interest_completed_derived,mr.interest_waived_derived),0) 'Interest Due', 
    IFNULL(mr.fee_charges_amount,0)- IFNULL(IFNULL(mr.fee_charges_completed_derived,mr.fee_charges_waived_derived),0) 'Fees Due', 
    IFNULL(mr.penalty_charges_amount,0)- IFNULL(IFNULL(mr.penalty_charges_completed_derived,mr.penalty_charges_waived_derived),0) 'Penalty Due',
      (mr.principal_amount- IFNULL(mr.principal_completed_derived,0)) +
       (mr.interest_amount- IFNULL(IFNULL(mr.interest_completed_derived,mr.interest_waived_derived),0)) + 
       (IFNULL(mr.fee_charges_amount,0)- IFNULL(IFNULL(mr.fee_charges_completed_derived,mr.fee_charges_waived_derived),0)) + 
       (IFNULL(mr.penalty_charges_amount,0)- IFNULL(IFNULL(mr.penalty_charges_completed_derived,mr.penalty_charges_waived_derived),0)) 'Total Due', 
     mlaa.total_overdue_derived 'Total Overdue',
     IFNULL(mlt.collection,0) AS "Collection" 
                     
 FROM m_office mo
  JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
  
  AND ounder.hierarchy like CONCAT('${currentUserHierarchy}', '%')
  
  LEFT JOIN m_client mc ON mc.office_id=ounder.id
  LEFT JOIN m_loan ml ON ml.client_id=mc.id AND ml.loan_status_id=300
  LEFT JOIN m_loan_arrears_aging mlaa ON mlaa.loan_id=ml.id
  LEFT JOIN m_loan_repayment_schedule mr ON mr.loan_id=ml.id AND mr.completed_derived=0
  LEFT JOIN m_product_loan mp ON mp.id=ml.product_id
  LEFT JOIN m_staff ms ON ms.id=ml.loan_officer_id
  LEFT JOIN m_currency cu ON cu.code=ml.currency_code 
  LEFT JOIN collection mlt ON mlt.loan_id=ml.id 
 WHERE mo.id=${officeId}
 AND (IFNULL(ml.loan_officer_id, -10) = "${loanOfficerId}" OR "-1" = "${loanOfficerId}")
 AND mr.duedate BETWEEN '${startDate}' AND '${endDate}'
 ORDER BY ounder.id,mr.duedate,ml.account_no

Demand Vs Collection summary example
---------------------------------------
SELECT ounder.id AS office_id, ms.id as loan_officer_id, center.group_id, mr.duedate, 
    SUM((mr.principal_amount- IFNULL(mr.principal_completed_derived,0)) +
    (mr.interest_amount- IFNULL(IFNULL(mr.interest_completed_derived,mr.interest_waived_derived),0)) + 
    (IFNULL(mr.fee_charges_amount,0)- IFNULL(IFNULL(mr.fee_charges_completed_derived,mr.fee_charges_waived_derived),0)) + 
    (IFNULL(mr.penalty_charges_amount,0)- IFNULL(IFNULL(mr.penalty_charges_completed_derived,mr.penalty_charges_waived_derived),0))) as 'Payment_Receivables_Current', 
    SUM(mlaa.total_overdue_derived) AS 'Total_Receivable'
 FROM m_office mo
 JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
 AND ounder.hierarchy like CONCAT('.', '%')
 INNER JOIN m_client mc ON mc.office_id=ounder.id
 INNER JOIN m_group_client center ON center.client_id=mc.id 
 INNER JOIN m_loan ml ON ml.client_id=mc.id AND ml.loan_status_id=300
 INNER JOIN m_loan_arrears_aging mlaa ON mlaa.loan_id=ml.id
 INNER JOIN m_loan_repayment_schedule mr ON mr.loan_id=ml.id AND mr.completed_derived=0
 INNER JOIN m_staff ms ON ms.id=ml.loan_officer_id 
 WHERE mo.id=39
 AND (IFNULL(ml.loan_officer_id, -10) = "8" OR "-1" = "8")
 AND mr.duedate BETWEEN '2016-07-01' AND '2016-12-01'
 GROUP BY ounder.id, ms.id, center.group_id, mr.duedate

The above query is being split up into a view a query on top of it
0.Test Section

Demand query alone

SELECT SUM(mr.principal_amount)+SUM(mr.interest_amount) as 'Payment_to_be_received', 
SUM((mr.principal_amount- IFNULL(mr.principal_completed_derived,0)) +
	(mr.interest_amount- IFNULL(IFNULL(mr.interest_completed_derived,mr.interest_waived_derived),0))) as 'Payment_pending',
ml.group_id,mr.duedate FROM m_loan_repayment_schedule mr inner join m_loan ml ON ml.id=mr.loan_id where ml.group_id=26 GROUP BY mr.duedate, ml.group_id;

Collection query alone
SELECT SUM(mlt.amount) AS 'Collection_for_the_day', mlt.transaction_date, mlt.transaction_type_enum, ml.group_id FROM m_loan_transaction mlt INNER JOIN m_loan ml ON mlt.loan_id=ml.id
WHERE mlt.transaction_type_enum=2
	AND ml.group_id=26
	GROUP BY mlt.transaction_date, mlt.transaction_type_enum, ml.group_id;


1. View section
Demand view
DROP VIEW Demand_Vs_Collection;
CREATE VIEW Demand_Vs_Collection AS SELECT ounder.id AS office_id, ms.id as loan_officer_id, center.group_id, mr.duedate,
	SUM(mr.principal_amount)+SUM(mr.interest_amount) as 'Payment_to_be_received', 
SUM((mr.principal_amount- IFNULL(mr.principal_completed_derived,0)) +
	(mr.interest_amount- IFNULL(IFNULL(mr.interest_completed_derived,mr.interest_waived_derived),0))) as 'Payment_pending' 	
	FROM m_office ounder 
	INNER JOIN m_client mc ON mc.office_id=ounder.id
	INNER JOIN m_group_client center ON center.client_id=mc.id 
	INNER JOIN m_loan ml ON ml.client_id=mc.id AND ml.loan_status_id=300
	INNER JOIN m_loan_arrears_aging mlaa ON mlaa.loan_id=ml.id
	INNER JOIN m_loan_repayment_schedule mr ON mr.loan_id=ml.id
	INNER JOIN m_staff ms ON ms.id=ml.loan_officer_id		
	GROUP BY ounder.id, ms.id, center.group_id, mr.duedate;

Test query
select * from Demand_Vs_Collection where office_id=39 and loan_officer_id=8 and duedate BETWEEN '2016-07-01' AND '2016-12-01';	


Collection view
DROP VIEW completed_collection_sumtotal;
CREATE VIEW completed_collection_sumtotal as SELECT sum(a.amount) as Collected_sofar, b.group_id from m_loan_transaction a inner join m_loan b on a.loan_id=b.id inner join m_group d on b.group_id=d.id  WHERE a.transaction_type_enum=2 AND b.loan_status_id=300 group by b.group_id;

Test query
select * from completed_collection_sumtotal WHERE group_id=26;

Collection on given date view
DROP VIEW collection_per_date;
CREATE VIEW collection_per_date AS SELECT SUM(mlt.amount) AS 'Collection_for_the_day', mlt.transaction_date, ml.group_id FROM m_loan_transaction mlt INNER JOIN m_loan ml ON mlt.loan_id=ml.id
WHERE mlt.transaction_type_enum=2 AND ml.loan_status_id=300 GROUP BY mlt.transaction_date, ml.group_id;

2.Query Section
SELECT ounder.name 'Office', dvc.duedate AS "Collection date",
    IFNULL(ms.display_name,'-') 'Loan Officer',
    mg.display_name as "Group Name",
    dvc.Payment_to_be_received as "Receivables on Duedate",
    dvc.Payment_pending as "Payment Pending on Duedate",
    ccd.Collection_for_the_day as "Collection on Duedate",
    pcs.Collected_sofar as "Total Completed Collection"
    FROM m_office mo
 	JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
 	AND ounder.hierarchy like CONCAT('.', '%')
 	INNER JOIN Demand_Vs_Collection dvc ON dvc.office_id=ounder.id
 	INNER JOIN m_group mg on mg.id=dvc.group_id
 	INNER JOIN m_staff ms on ms.id=dvc.loan_officer_id
 	LEFT JOIN completed_collection_sumtotal pcs ON pcs.group_id=dvc.group_id 
 	LEFT JOIN collection_per_date ccd ON ccd.group_id=dvc.group_id AND ccd.transaction_date=dvc.duedate 
	WHERE mo.id=28	
 	AND (IFNULL(dvc.loan_officer_id, -10) = "1" OR "-1" = "8")
 	AND dvc.duedate BETWEEN '2017-01-01' AND '2017-01-01'

3. Templatized query
 	SELECT ounder.name 'Office', dvc.duedate AS "Collection date",
    IFNULL(ms.display_name,'-') 'Loan Officer',
    mg.display_name as "Group Name",
    dvc.Payment_to_be_received as "Receivables on Duedate",
    dvc.Payment_pending as "Payment Pending on Duedate",
    ccd.Collection_for_the_day as "Collection on Duedate",
    pcs.Collected_sofar as "Total Completed Collection"

    FROM m_office mo
 	JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
 	AND ounder.hierarchy like CONCAT('${currentUserHierarchy}', '%')

 	INNER JOIN Demand_Vs_Collection dvc ON dvc.office_id=ounder.id
 	INNER JOIN m_group mg on mg.id=dvc.group_id
 	INNER JOIN m_staff ms on ms.id=dvc.loan_officer_id
 	LEFT JOIN completed_collection_sumtotal pcs ON pcs.group_id=dvc.group_id 
 	LEFT JOIN collection_per_date ccd ON ccd.group_id=dvc.group_id AND ccd.transaction_date=dvc.duedate 
	WHERE mo.id=${officeId}
 	AND (IFNULL(dvc.loan_officer_id, -10) = "${loanOfficerId}" OR "-1" = "${loanOfficerId}")
 	AND dvc.duedate BETWEEN '${startDate}' AND '${endDate}'


SELECT 
    ounder.name 'Office', 
    IFNULL(ms.display_name,'-') 'Loan Officer',
    mgc.group_id as "Group"
    mp.name 'Product',
    mr.duedate 'Due Date',
    mr.installment 'Installment',
    (mr.principal_amount- IFNULL(mr.principal_completed_derived,0)) +
    (mr.interest_amount- IFNULL(IFNULL(mr.interest_completed_derived,mr.interest_waived_derived),0)) + 
    (IFNULL(mr.fee_charges_amount,0)- IFNULL(IFNULL(mr.fee_charges_completed_derived,mr.fee_charges_waived_derived),0)) + 
    (IFNULL(mr.penalty_charges_amount,0)- IFNULL(IFNULL(mr.penalty_charges_completed_derived,mr.penalty_charges_waived_derived),0)) 'Tobe received for this time', 
    mlaa.total_overdue_derived 'Total receivable',
     IFNULL(mlt.collection,0) AS "Collected so far"
                     
 FROM m_office mo
  JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
  
  AND ounder.hierarchy like CONCAT('.', '%')
  
  LEFT JOIN m_client mc ON mc.office_id=ounder.id
  LEFT JOIN m_loan ml ON ml.client_id=mc.id AND ml.loan_status_id=300
  LEFT JOIN m_loan_arrears_aging mlaa ON mlaa.loan_id=ml.id
  LEFT JOIN m_loan_repayment_schedule mr ON mr.loan_id=ml.id AND mr.completed_derived=0
  LEFT JOIN m_product_loan mp ON mp.id=ml.product_id
  LEFT JOIN m_staff ms ON ms.id=ml.loan_officer_id
  LEFT JOIN m_currency cu ON cu.code=ml.currency_code
  LEFT JOIN collection mlt ON mlt.loan_id=ml.id 
 WHERE mo.id=39
 AND (IFNULL(ml.loan_officer_id, -10) = "8" OR "-1" = "8")
 AND mr.duedate BETWEEN '2016-07-01' AND '2016-08-01'
 ORDER BY ounder.id,mr.duedate,ml.account_no







Loan issued centres
---------------------------------

1. View section
drop view loans_per_group_date;
create view loans_per_group_date as select count(mgc.id) loan_count, ml.group_id, year(ml.disbursedon_date) as  year, month(disbursedon_date) as month, week(disbursedon_date) as week from m_loan ml inner join m_group mgc on ml.group_id=mgc.id where ml.disbursedon_date is not null group by ml.group_id, year(disbursedon_date), month(disbursedon_date), week(disbursedon_date);

DROP VIEW LOAN_ISSUED_CENTRE;
CREATE VIEW LOAN_ISSUED_CENTRE AS SELECT office.id as office_id, IFNULL(center.staff_id,-1) AS staff_id, count(lpg.group_id) as center_count, group_concat(center.display_name) as center_list,week ,month, year from loans_per_group_date lpg inner join m_group center on lpg.group_id=center.id 
INNER JOIN m_office office on center.office_id=office.id where center.closedon_date is null group by office.id, center.staff_id, year, month, week;


Example query
-------------------------------

SELECT ounder.name as "Office", 
	IFNULL(ms.display_name,'-') as "Loan Officer",
	week.week_name as "Quarter of Week", 
	week.start_date as "Week start",
	week.end_Date as "Week end",
	month.month_name as "Month", 
	a.year as "Year", 
	a.center_count as "New Centers",
	a.center_list as "Center list"	
	FROM m_office mo
  	JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
  	AND ounder.hierarchy like CONCAT('.', '%')
  	INNER JOIN LOAN_ISSUED_CENTRE a ON a.office_id=ounder.id 
  	INNER JOIN week_master week on concat(year,'-',month,'-',week)=week.week_id 
  	INNER JOIN month_master month on month.month_num=a.month
  	INNER JOIN m_staff ms ON ms.id=a.staff_id 
  	WHERE mo.id=39
 	AND (IFNULL(a.staff_id, -10) = "8" OR "-1" = "8")
 	AND a.week BETWEEN WEEK('2016-06-01') AND WEEK('2016-11-01')
  	ORDER BY a.year, a.month, a.week ASC;


Template query
------------------------------------
SELECT ounder.name as "Office", 
	IFNULL(ms.display_name,'-') as "Loan Officer",
	week.week_name as "Quarter of Week", 
	week.start_date as "Week start",
	week.end_Date as "Week end",
	month.month_name as "Month", 
	a.year as "Year", 
	a.center_count as "New Centers",
	a.center_list as "Center list"	
	FROM m_office mo
  	JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
  	AND ounder.hierarchy like CONCAT('${currentUserHierarchy}', '%')
  	INNER JOIN LOAN_ISSUED_CENTRE a ON a.office_id=ounder.id 
  	INNER JOIN week_master week on concat(year,'-',month,'-',week)=week.week_id 
  	INNER JOIN month_master month on month.month_num=a.month
  	INNER JOIN m_staff ms ON ms.id=a.staff_id 
  	WHERE mo.id=${officeId}
 	AND (IFNULL(a.staff_id, -10) = "${loanOfficerId}" OR "-1" = "${loanOfficerId}")
 	AND a.week BETWEEN WEEK('${startDate}') AND WEEK('${endDate}')
  	ORDER BY a.year, a.month, a.week ASC;





Loan Issue clients
--------------------------------------
Total number clients issued with loans 




Opening balance and Closing balance
--------------------------------------
1. I am not making the mistake I did twice before now
2. JournalEntry.type(type_enum) - is filled by JournalEntryType. CREDIT =1  AND DEBIT=2;
3. JournalEntry.entityType(entity_type_enum) - is filled by PortfolioProductType



Master data required to map different type accounts needed
------------------------------------------------------------
1. Creating account type master table - /fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/accounting/Account.java

CREATE TABLE account_type_master (
	account_type_num tinyint,
	account_type_name VARCHAR(15)
)ENGINE=INNODB CHARSET=UTF8;

insert into account_type_master  (account_type_num, account_type_name) values (1, "ASSET"),(2,"LIABILITY"),(3, "EQUITY"),(4,"INCOME"),(5,"EXPENSE");


Query to obtain all credits on the first day
------------------------------------------------------------
All credits on the first date of transaction

SELECT SUM(je.amount) as credit, acc.classification_enum, je.entry_date, mst.account_type_name FROM acc_gl_journal_entry je INNER JOIN acc_gl_account acc ON je.account_id=acc.id INNER JOIN account_type_master mst ON acc.classification_enum=mst.account_type_num WHERE type_enum=1 and entry_date='2016-06-25' group by acc.classification_enum, je.entry_date, mst.account_type_name;

All debits on the first date of transaction

SELECT SUM(je.amount) as debit, acc.classification_enum, je.entry_date, mst.account_type_name FROM acc_gl_journal_entry je INNER JOIN acc_gl_account acc ON je.account_id=acc.id INNER JOIN account_type_master mst ON acc.classification_enum=mst.account_type_num WHERE type_enum=2 and entry_date='2016-06-25' group by acc.classification_enum, je.entry_date, mst.account_type_name;

DROP TABLE IF EXISTS CREDIT_DEBIT_ON_DATE_PER_OFFICE;
CREATE TABLE CREDIT_DEBIT_ON_DATE_PER_OFFICE (
entry_date DATE NOT NULL, 
credit decimal(19,6) default 0, 
debit decimal(19,6) default 0, 
classification_type_enum smallint, 
office_id bigint
) ENGINE=INNODB DEFAULT CHARSET=UTF8;


DROP TABLE IF EXISTS BALANCE_SHEET;
CREATE TABLE BALANCE_SHEET(
entry_date DATE NOT NULL, 
credit decimal(19,6) default 0, 
debit decimal(19,6) default 0, 
opening_bal decimal(19,6) default 0,
closing_bal decimal(19,6) default 0,
office_id bigint
) ENGINE=INNODB DEFAULT CHARSET=UTF8;

INSERT all credits statement
-------------------------------------
INSERT INTO CREDIT_DEBIT_ON_DATE_PER_OFFICE (entry_date, classification_type_enum, office_id, credit) SELECT je.entry_date, acc.classification_enum, je.office_id, SUM(je.amount) as credit FROM acc_gl_journal_entry je INNER JOIN acc_gl_account acc ON je.account_id=acc.id WHERE type_enum=1 group by acc.classification_enum, je.entry_date, je.office_id;

INSERT all debits statement
-------------------------------------
INSERT INTO CREDIT_DEBIT_ON_DATE_PER_OFFICE (entry_date, classification_type_enum, office_id, debit) SELECT je.entry_date, acc.classification_enum,je.office_id, SUM(je.amount) as debit FROM acc_gl_journal_entry je INNER JOIN acc_gl_account acc ON je.account_id=acc.id WHERE type_enum=2 group by acc.classification_enum, je.entry_date, je.office_id;

Instruction for first date
------------------------------------------
INSERT INTO BALANCE_SHEET (entry_date, office_id, credit, debit, opening_bal, closing_bal) SELECT entry_date, office_id, SUM(credit) as credit, SUM(debit) as debit, 0 as opening_balance, SUM(credit)- SUM(debit) as closing_balance FROM CREDIT_DEBIT_ON_DATE_PER_OFFICE WHERE entry_date='2016-06-25' group by entry_date,office_id;

DELIMITER ;
DROP PROCEDURE IF EXISTS generate_balance_sheet;

DELIMITER #
CREATE PROCEDURE generate_balance_sheet()
 BEGIN
 DECLARE office_done BOOLEAN DEFAULT FALSE;	
 DECLARE officeid INT DEFAULT 0;
 DECLARE entryDate DATE DEFAULT NULL;
 DECLARE prevDate DATE DEFAULT NULL;
 DECLARE openingBalance DECIMAL(15,6) DEFAULT NULL;
 DECLARE office_cursor CURSOR FOR select DISTINCT office_id as office_id from CREDIT_DEBIT_ON_DATE_PER_OFFICE;
 DECLARE CONTINUE HANDLER FOR NOT FOUND SET office_done = TRUE;


 OPEN office_cursor;
  find_txn_date:LOOP
  FETCH office_cursor INTO officeid; 
  IF office_done THEN 
   CLOSE office_cursor;
   LEAVE find_txn_date;
  END IF; 

  BLOCK2: BEGIN
  DECLARE date_done BOOLEAN DEFAULT FALSE;	
  DECLARE date_cursor CURSOR FOR select DISTINCT entry_date as entry_date from CREDIT_DEBIT_ON_DATE_PER_OFFICE WHERE office_id=officeid;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET date_done = TRUE;
  OPEN date_cursor;
   prepare_balance:LOOP
   FETCH date_cursor INTO entryDate;
   IF date_done THEN
    LEAVE prepare_balance;
   END IF;
   IF prevDate IS NULL THEN
   	SELECT MIN(entry_date) FROM CREDIT_DEBIT_ON_DATE_PER_OFFICE WHERE office_id=officeid INTO prevDate;

   	INSERT INTO BALANCE_SHEET (entry_date, office_id, credit, debit, opening_bal, closing_bal) SELECT entry_date, office_id, SUM(credit) as credit, SUM(debit) as debit, 0 as opening_balance, SUM(credit)- SUM(debit) as closing_balance FROM CREDIT_DEBIT_ON_DATE_PER_OFFICE WHERE entry_date=prevDate group by entry_date,office_id;
   
   ELSE 
    IF entryDate>prevDate THEN
   	  SELECT closing_bal FROM BALANCE_SHEET WHERE office_id=officeid AND entry_date=prevDate INTO openingBalance;

   	  INSERT INTO BALANCE_SHEET (entry_date, office_id, credit, debit, opening_bal, closing_bal) SELECT entry_date, office_id, SUM(credit) as credit, SUM(debit) as debit, openingBalance as opening_balance, 
   	  (openingBalance + SUM(credit))- SUM(debit) as closing_balance FROM CREDIT_DEBIT_ON_DATE_PER_OFFICE WHERE entry_date=entryDate group by entry_date,office_id;

   	END IF;
   END IF;
   END LOOP prepare_balance;
   CLOSE date_cursor;
  END BLOCK2;
END LOOP find_txn_date;
END#
delimiter ;


Example query
---------------------------
SELECT ounder.name as "Office", 
	bs.entry_date as "Date",
	bs.opening_bal as "Opening balance",
	bs.closing_bal as "Closing balance",
	bs.credit as "Incoming credit",
	bs.debit as "Outgoing debit"	
	FROM m_office mo
  	JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
  	AND ounder.hierarchy like CONCAT('.', '%')
  	INNER JOIN BALANCE_SHEET bs ON bs.office_id=ounder.id   	
  	WHERE mo.id=39 	
 	AND bs.entry_date BETWEEN '2016-06-01' AND '2017-03-01'
  	ORDER BY bs.entry_date;

Template query
------------------------------------
SELECT ounder.name as "Office", 
	bs.entry_date as "Date",
	bs.opening_bal as "Opening balance",
	bs.closing_bal as "Closing balance",
	bs.credit as "Incoming credit",
	bs.debit as "Outgoing debit"	
	FROM m_office mo
  	JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
  	AND ounder.hierarchy like CONCAT('${currentUserHierarchy}', '%')
  	INNER JOIN BALANCE_SHEET bs ON bs.office_id=ounder.id   	
  	WHERE mo.id=${officeId} 	
 	AND bs.entry_date BETWEEN '${startDate}' AND '${endDate}'
  	ORDER BY bs.entry_date;




Analysis of existing reports
-----------------------------------
01. Active clients - 
02. Active group leaders - Yet to filled
03. Active Loan clients - 
04. Active Loan Summary per Branch - deleted
05. Active Loans - Details(Pentaho) - to be deleted
06. Active Loans summary - Editing disabled
07. Active Loans details - Editing disabled
08. Active Loans by Disbursal Period - Editing disabled
09. Active Loans in last installment - Editing disabled
10. Active Loans in last installment Summary
11. Active Loans Passed Final Maturity
12. Expected payments by date
13. Loan outstanding after final instalment date
14. Client Loans listing



NOTE - I HAVE MOVED THIS ENTIRE REPORT MODULE INTO A DEDICATED FILE CALLED day-sheet.sql on Apr 26 12.20. I decided to do this as Sena na, wanted me to also add corporate and other office entries into this 

Daysheet report
------------------------------




Non executable, but refereneable query
-------------------------------------
SELECT jl.account_id, account_type.name,jl.amount FROM acc_gl_journal_entry jl INNER JOIN acc_gl_account account_type ON jl.account_id=account_type.id
INNER JOIN m_loan_transaction mlt ON jl.loan_transaction_id=mlt.id
INNER JOIN m_loan ml ON ml.id=mlt.loan_id
INNER JOIN m_client mc ON mc.id=ml.client_id
INNER JOIN m_group mg ON ml.group_id=mg.id
WHERE jl.entry_date='2017-04-01';


Query meant to find out all rouge entries with principal being mapped to loan-portfolio
-------------------------------------------------------------------
SELECT jl.account_id, account_type.name,jl.amount FROM acc_gl_journal_entry jl INNER JOIN acc_gl_account account_type ON jl.account_id=account_type.id
WHERE jl.type_enum=1 AND jl.amount in (290, 50);



SELECT DISTINCT amount FROM acc_gl_journal_entry jl WHERE  jl.type_enum=1;

update instruction to change all the rogue entries
-------------------------------------------------------
UPDATE acc_gl_journal_entry jl SET jl.account_id=84 WHERE jl.type_enum=1 AND jl.amount in (290,50);


verification query
--------------------------
 select count(*), transaction_type_enum from m_loan_transaction group by transaction_type_enum;

Daysheet credit 
--------------------------------------

DROP VIEW SAMPLE_CREDIT_SYSTEM;
CREATE VIEW SAMPLE_CREDIT_SYSTEM AS SELECT jl.account_id, account_type.name, SUM(jl.amount) as amount,mg.display_name, jl.office_id, jl.entry_date FROM acc_gl_journal_entry jl INNER JOIN acc_gl_account account_type ON jl.account_id=account_type.id
INNER JOIN m_loan_transaction mlt ON jl.loan_transaction_id=mlt.id
INNER JOIN m_loan ml ON ml.id=mlt.loan_id
INNER JOIN m_group mg ON ml.group_id=mg.id
WHERE jl.account_id!=2 AND 
jl.type_enum=1 group by account_type.name, mg.display_name, jl.office_id, jl.entry_date;

SELECT * FROM SAMPLE_CREDIT_SYSTEM WHERE entry_date='2017-04-01' AND office_id=39;

SELECT a.entry_date as date, m_office.name,a.display_name as centre, group_concat(a.name) as components, SUM(a.amount) as credit FROM SAMPLE_CREDIT_SYSTEM a INNER JOIN m_office ON a.office_id=m_office.id 
WHERE a.entry_date='2017-04-01' AND office_id=39 GROUP BY a.display_name ;


DROP VIEW SAMPLE_CREDIT_MANUAL;
CREATE VIEW SAMPLE_CREDIT_MANUAL AS SELECT jl.account_id, account_type.name, SUM(jl.amount) as amount, jl.office_id, jl.entry_date from acc_gl_journal_entry jl inner join acc_gl_account account_type on jl.account_id=account_type.id WHERE manual_entry=1 and type_enum=2
AND jl.account_id=85
GROUP BY jl.account_id, account_type.name, jl.office_id, jl.entry_date;

SELECT * FROM SAMPLE_CREDIT_MANUAL WHERE entry_date='2017-04-01' AND office_id=39;
SELECT * FROM SAMPLE_CREDIT_MANUAL WHERE entry_date='2017-04-03' AND office_id=39;


DROP VIEW SAMPLE_DEBIT_SYSTEM;
CREATE VIEW SAMPLE_DEBIT_SYSTEM AS SELECT jl.account_id, account_type.name, SUM(jl.amount) as amount,mg.display_name, jl.office_id, jl.entry_date FROM acc_gl_journal_entry jl INNER JOIN acc_gl_account account_type ON jl.account_id=account_type.id
INNER JOIN m_loan_transaction mlt ON jl.loan_transaction_id=mlt.id
INNER JOIN m_loan ml ON ml.id=mlt.loan_id
INNER JOIN m_group mg ON ml.group_id=mg.id
WHERE jl.account_id=2 AND 
jl.type_enum=1 group by account_type.name, mg.display_name, jl.office_id, jl.entry_date;

SELECT * FROM SAMPLE_DEBIT_SYSTEM WHERE entry_date='2017-04-01' AND office_id=39;


Daysheet debit 
--------------------------------------
DROP VIEW SAMPLE_DEBIT_MANUAL;
CREATE VIEW SAMPLE_DEBIT_MANUAL AS SELECT jl.account_id, account_type.name, SUM(jl.amount) AS amount, jl.office_id, jl.entry_date from acc_gl_journal_entry jl inner join acc_gl_account account_type on jl.account_id=account_type.id WHERE manual_entry=1 and type_enum=2 and
jl.account_id!=85
GROUP BY jl.account_id, account_type.name, jl.office_id, jl.entry_date;

SELECT * FROM SAMPLE_DEBIT_MANUAL WHERE entry_date='2017-04-01';

SELECT entry_date as date, m_office.name, a.name as outgoing, amount from SAMPLE_DEBIT_MANUAL a INNER JOIN m_office ON a.office_id=m_office.id 
WHERE a.entry_date='2017-04-01' AND office_id=39;

SELECT jl.account_id, account_type.name, jl.amount AS amount, jl.office_id, jl.entry_date, jl.type_enum from acc_gl_journal_entry jl inner join acc_gl_account account_type on jl.account_id=account_type.id 
WHERE jl.entry_date='2017-04-01' AND jl.office_id=39  AND manual_entry=1;


Final queries for report
------------------------------------------

System Incoming/Credit(Principal, interest, fees)
-------------------------------------------------
SELECT a.entry_date as date, m_office.name,a.display_name as centre, group_concat(a.name) as components, SUM(a.amount) as credit FROM SAMPLE_CREDIT_SYSTEM a INNER JOIN m_office ON a.office_id=m_office.id 
WHERE a.entry_date='2017-04-01' AND office_id=39 GROUP BY a.display_name ;

Manual Incoming/Credit(Cash transfer)
------------------------------------------------
SELECT * FROM SAMPLE_CREDIT_MANUAL WHERE entry_date='2017-04-01' AND office_id=39;

System Outgoing/Debit(Loan disbursal)
----------------------------------------------
SELECT * FROM SAMPLE_DEBIT_SYSTEM WHERE entry_date='2017-04-01' AND office_id=39;

Manual Outgoing/Debit(Cash transfer & expenses)
-------------------------------------------------
SELECT entry_date as date, m_office.name, a.name as outgoing, amount from SAMPLE_DEBIT_MANUAL a INNER JOIN m_office ON a.office_id=m_office.id 
WHERE a.entry_date='2017-04-01' AND office_id=39;




Stored procedure calculation queriues
------------------------------------------


System Credit query
--------------
SELECT SUM(a.amount) as credit FROM SAMPLE_CREDIT_SYSTEM a WHERE a.entry_date='2017-04-01' AND office_id=39;

Manual Credit query
-------------
SELECT sum(amount) FROM SAMPLE_CREDIT_MANUAL WHERE entry_date='2017-04-03' AND office_id=39;

System Debit query
-------------
SELECT sum(amount) FROM SAMPLE_DEBIT_SYSTEM WHERE entry_date='2017-04-01' AND office_id=39;

Manual debit query
---------
SELECT sum(a.amount) from SAMPLE_DEBIT_MANUAL a WHERE a.entry_date='2017-04-01' AND office_id=39;




DROP TABLE IF EXISTS BALANCE_SHEET;
CREATE TABLE BALANCE_SHEET(
entry_date DATE NOT NULL, 
credit decimal(19,6) default 0, 
debit decimal(19,6) default 0, 
opening_bal decimal(19,6) default 0,
closing_bal decimal(19,6) default 0,
office_id bigint
) ENGINE=INNODB DEFAULT CHARSET=UTF8;



DELIMITER ;
DROP PROCEDURE IF EXISTS generate_balance_sheet;

DELIMITER #
CREATE PROCEDURE generate_balance_sheet()
 BEGIN
 DECLARE office_done BOOLEAN DEFAULT FALSE;	
 DECLARE officeid INT DEFAULT 0; 
 DECLARE office_cursor CURSOR FOR  select DISTINCT office_id as office_id from acc_gl_journal_entry;
 DECLARE CONTINUE HANDLER FOR NOT FOUND SET office_done = TRUE;
 OPEN office_cursor;
  find_txn_date:LOOP
   FETCH office_cursor INTO officeid;
    IF office_done THEN 
     CLOSE office_cursor;
     LEAVE find_txn_date;
    END IF; 
    BLOCK2: BEGIN
     DECLARE date_done BOOLEAN DEFAULT FALSE;
     DECLARE entryDate DATE DEFAULT NULL;
     DECLARE prevDate DATE DEFAULT NULL;
     DECLARE systemCredit DECIMAL(15,6) DEFAULT 0.00;
     DECLARE manualCredit DECIMAL(15,6) DEFAULT 0.00;
     DECLARE systemDebit DECIMAL(15,6) DEFAULT 0.00;
     DECLARE manualDebit DECIMAL(15,6) DEFAULT 0.00;
     DECLARE totalCredit DECIMAL(15,6) DEFAULT 0.00;
     DECLARE totalDebit DECIMAL(15,6) DEFAULT 0.00;
     DECLARE opening DECIMAL(15,6) DEFAULT 0.00;
     DECLARE date_cursor CURSOR FOR select DISTINCT entry_date as entry_date from acc_gl_journal_entry WHERE office_id=officeid order by entry_date asc;
     DECLARE CONTINUE HANDLER FOR NOT FOUND SET date_done = TRUE;
     OPEN date_cursor;
      prepare_balance:LOOP
       FETCH date_cursor INTO entryDate;
        IF date_done THEN
         LEAVE prepare_balance;
        END IF;
        IF prevDate IS NULL THEN
   	     SELECT MIN(entry_date) FROM acc_gl_journal_entry WHERE office_id=officeid INTO prevDate;
   	     SELECT ifnull(SUM(a.amount),0) as credit FROM SAMPLE_CREDIT_SYSTEM a WHERE a.entry_date=prevDate AND office_id=officeid INTO systemCredit;

   	     SELECT ifnull(sum(amount),0) FROM SAMPLE_CREDIT_MANUAL WHERE entry_date=prevDate AND office_id=officeid INTO manualCredit;

   	     SELECT ifnull(sum(amount),0) FROM SAMPLE_DEBIT_SYSTEM WHERE entry_date=prevDate AND office_id=officeid INTO systemDebit;

   	     SELECT ifnull(sum(a.amount),0) from SAMPLE_DEBIT_MANUAL a WHERE entry_date=prevDate AND office_id=officeid INTO manualDebit;

   	     SELECT systemCredit+manualCredit INTO totalCredit;

   	     SELECT systemDebit+manualDebit INTO totalDebit;

         INSERT INTO BALANCE_SHEET (entry_date, office_id, credit, debit, opening_bal, closing_bal) SELECT prevDate, officeid, totalCredit, totalDebit, opening, (opening+totalCredit)-totalDebit;

   	    ELSE 
         IF entryDate>prevDate THEN
   	      SELECT closing_bal FROM BALANCE_SHEET WHERE office_id=officeid AND entry_date=prevDate INTO opening;

   	      SELECT ifnull(SUM(a.amount),0) as credit FROM SAMPLE_CREDIT_SYSTEM a WHERE a.entry_date=entryDate AND office_id=officeid INTO systemCredit;

   	      SELECT ifnull(sum(amount),0) FROM SAMPLE_CREDIT_MANUAL WHERE entry_date=entryDate AND office_id=officeid INTO manualCredit;

   	      SELECT ifnull(sum(amount),0) FROM SAMPLE_DEBIT_SYSTEM WHERE entry_date=entryDate AND office_id=officeid INTO systemDebit;

   	      SELECT ifnull(sum(a.amount),0) from SAMPLE_DEBIT_MANUAL a WHERE entry_date=entryDate AND office_id=officeid INTO manualDebit;

   	      SELECT systemCredit+manualCredit INTO totalCredit;

   	      SELECT systemDebit+manualDebit INTO totalDebit;

          INSERT INTO BALANCE_SHEET (entry_date, office_id, credit, debit, opening_bal, closing_bal) SELECT entryDate, officeid, totalCredit, totalDebit, opening, (opening+totalCredit)-totalDebit;   	      

   	      SELECT entryDate INTO prevDate;

   	     END IF;
   	    END IF;

      END LOOP prepare_balance;
     CLOSE date_cursor;
    END BLOCK2;
  END LOOP find_txn_date;
 END#
DELIMITER ; 



DROP TABLE IF EXISTS daily_sheet;
CREATE TABLE `daily_sheet` (
  `entry_date` date NOT NULL,
  `office_id` bigint(20) DEFAULT NULL,
  `details` varchar(250) DEFAULT NULL,
  `credit` decimal(19,6) DEFAULT '0.000000',
  `debit` decimal(19,6) DEFAULT '0.000000',
  `entry_order` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


DELIMITER ;
DROP PROCEDURE IF EXISTS generate_daily_sheet;

DELIMITER #
CREATE PROCEDURE generate_daily_sheet()
BEGIN
 DECLARE office_done BOOLEAN DEFAULT FALSE;	
 DECLARE officeid INT DEFAULT 0; 
 DECLARE office_cursor CURSOR FOR  select DISTINCT office_id as office_id from BALANCE_SHEET;
 DECLARE CONTINUE HANDLER FOR NOT FOUND SET office_done = TRUE;
 OPEN office_cursor;
 find_txn_date:LOOP
   FETCH office_cursor INTO officeid;
    IF office_done THEN 
     CLOSE office_cursor;
     LEAVE find_txn_date;
    END IF;
    BLOCK2: BEGIN
     DECLARE date_done BOOLEAN DEFAULT FALSE;
     DECLARE entryDate DATE DEFAULT NULL;
     DECLARE prevDate DATE DEFAULT NULL;
     DECLARE systemCredit DECIMAL(15,6) DEFAULT 0.00;
     DECLARE manualCredit DECIMAL(15,6) DEFAULT 0.00;
     DECLARE systemDebit DECIMAL(15,6) DEFAULT 0.00;
     DECLARE manualDebit DECIMAL(15,6) DEFAULT 0.00;
     DECLARE totalCredit DECIMAL(15,6) DEFAULT 0.00;
     DECLARE totalDebit DECIMAL(15,6) DEFAULT 0.00;
     DECLARE opening DECIMAL(15,6) DEFAULT 0.00;
     DECLARE date_cursor CURSOR FOR select DISTINCT entry_date as entry_date from BALANCE_SHEET WHERE office_id=officeid order by entry_date asc;
     DECLARE CONTINUE HANDLER FOR NOT FOUND SET date_done = TRUE;
     OPEN date_cursor;
      prepare_balance:LOOP
       FETCH date_cursor INTO entryDate;
        IF date_done THEN
         LEAVE prepare_balance;
        END IF;
       
   	    INSERT INTO daily_sheet(entry_date, office_id, details, credit, debit, entry_order) 
   	    SELECT entryDate, officeid, "Opening Balance", opening_bal as credit, 0 as debit, 0 as entry_order FROM BALANCE_SHEET WHERE entry_date=entryDate AND office_id=officeid;

        INSERT INTO daily_sheet(entry_date, office_id, details, credit, debit, entry_order) 
   	    SELECT entryDate, officeid, "Inbound Cash transfer", ifnull(sum(amount),0) as credit, 0 as debit, 1 entry_order FROM SAMPLE_CREDIT_MANUAL WHERE entry_date=entryDate AND office_id=officeid;

   	    INSERT INTO daily_sheet(entry_date, office_id, details, credit, debit, entry_order) 
   	    SELECT entryDate, officeid, CONCAT("Collection for ",a.display_name) as details, SUM(amount) as credit, 0 as debit, 3 as entry_order FROM SAMPLE_CREDIT_SYSTEM a WHERE a.entry_date=entryDate AND office_id=officeid GROUP BY a.display_name;

   	    INSERT INTO daily_sheet(entry_date, office_id, details, credit, debit, entry_order) 
   	    SELECT entryDate, officeid, CONCAT("Loan disbursal for ",a.display_name) as details, 0 as credit, SUM(amount) as debit, 4 as entry_order FROM SAMPLE_DEBIT_SYSTEM a WHERE a.entry_date=entryDate AND office_id=officeid GROUP BY a.office_id;

   	    INSERT INTO daily_sheet(entry_date, office_id, details, credit, debit, entry_order) 
        SELECT entryDate, officeid, a.name as details, 0 AS credit, amount as debit, 5 as entry_order from SAMPLE_DEBIT_MANUAL a WHERE a.entry_date=entryDate AND office_id=officeid;

        INSERT INTO daily_sheet(entry_date, office_id, details, credit, debit, entry_order) 
   	    SELECT entryDate, officeid, "Closing Balance", 0 as credit, closing_bal as debit, 6 as entry_order FROM BALANCE_SHEET WHERE entry_date=entryDate AND office_id=officeid;

   	    INSERT INTO daily_sheet(entry_date, office_id, details, credit, debit, entry_order) 
   	    SELECT entryDate, officeid, "Total Credit/Debit", opening_bal+credit as credit, closing_bal+debit as debit, 7 as entry_order FROM BALANCE_SHEET WHERE entry_date=entryDate AND office_id=officeid;

        
      END LOOP prepare_balance;
     CLOSE date_cursor;
    END BLOCK2;
  END LOOP find_txn_date;
 END#
DELIMITER ; 



SELECT bs.details as "Details",
	bs.credit as "Incoming credit",
	bs.debit as "Outgoing debit"	 	
	FROM m_office mo
  	JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
  	AND ounder.hierarchy like CONCAT('.', '%')
  	INNER JOIN day_sheet bs ON bs.office_id=ounder.id   	
  	WHERE mo.id=39  	
 	AND bs.entry_date = '2017-04-01'  ORDER BY bs.entry_order asc


SELECT bs.details as "Details",
	bs.credit as "Incoming credit",
	bs.debit as "Outgoing debit"
	FROM m_office mo
  	JOIN m_office ounder ON ounder.hierarchy LIKE CONCAT(mo.hierarchy, '%')
  	AND ounder.hierarchy like CONCAT('${currentUserHierarchy}', '%')
  	INNER JOIN day_sheet bs ON bs.office_id=ounder.id   	
  	WHERE mo.id=${officeId}  	
 	AND bs.entry_date in ('${startDate}')  ORDER BY bs.entry_order asc


Stored procedure meant for executing day sheet generation on cron
--------------------------------------------------------------------
NOTE  - Setting up the cron tab for execution

https://askubuntu.com/questions/2368/how-do-i-set-up-a-cron-job
https://help.ubuntu.com/community/CronHowto

*/59 * * * * mysql -uroot -ppassword mifostenant-default -e "CALL day_sheet_generator;"


DELIMITER ;
DROP PROCEDURE IF EXISTS day_sheet_generator;

DELIMITER #
CREATE PROCEDURE day_sheet_generator()
BEGIN
	TRUNCATE BALANCE_SHEET;	
	CALL generate_balance_sheet();
	TRUNCATE daily_sheet;
	CALL generate_daily_sheet();
	DROP TABLE day_sheet;
	CREATE TABLE day_sheet AS SELECT * FROM daily_sheet;
END#
DELIMITER ;





Code meant to offer collection sheet data
------------------------------------------------------------
https://localhost:8443/fineract-provider/api/v1/centers?dateFormat=ddMMMMyyyy&locale=en&meetingDate=20November2016&officeId=39&staffId=8

org.apache.fineract.portfolio.group.service.CenterReadPlatformServiceImpl
org.apache.fineract.portfolio.group.service.CenterReadPlatformServiceImpl.CenterCalendarDataMapper


https://localhost:8443/fineract-provider/api/v1/clients/2467/accounts


